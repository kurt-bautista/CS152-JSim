.include "ALU.jsim"

.subckt controlunit OPCODE[5:0] Z PCSEL[1:0] RA2SEL BSEL WDSEL[1:0] ALUFN[5:0] Wr WERF 

    Xconn_1 OPCODE[5:0] OPCODEZ[6:1] knex
    .connect OPCODEZ0 Z

    * Control Unit
    Xmem
    + vdd 0 0 OPCODEZ[6:0] PCSEL[1:0] RA2SEL BSEL WDSEL[1:0] ALUFN[5:0] Wr WERF 
    + $memory width=14 nlocations=128
    + contents=(
        + 0b00000000000000
        + 0b00000000000000
        + 0b00000000000000
        + 0b00000000000000
        + 0b00000000000000
        + 0b00000000000000
        + 0b00000000000000
        + 0b00000000000000
        + 0b00000000000000
        + 0b00000000000000
        + 0b00000000000000
        + 0b00000000000000
        + 0b00000000000000
        + 0b00000000000000
        + 0b00000000000000
        + 0b00000000000000
        + 0b00000000000000
        + 0b00000000000000
        + 0b00000000000000
        + 0b00000000000000
        + 0b00000000000000
        + 0b00000000000000
        + 0b00000000000000
        + 0b00000000000000
        + 0b00000000000000
        + 0b00000000000000
        + 0b00000000000000
        + 0b00000000000000
        + 0b00000000000000
        + 0b00000000000000
        + 0b00000000000000
        + 0b00000000000000
        + 0b00000000000000
        + 0b00000000000000
        + 0b00000000000000
        + 0b00000000000000
        + 0b00000000000000
        + 0b00000000000000
        + 0b00000000000000
        + 0b00000000000000
        + 0b00000000000000
        + 0b00000000000000
        + 0b00000000000000
        + 0b00000000000000
        + 0b00000000000000
        + 0b00000000000000
        + 0b00000000000000
        + 0b00000000000000
        + 0b00011000000001 // LD
        + 0b00011000000001 // LD
        + 0b00110000000010 // ST
        + 0b00110000000010 // ST
        + 0b00000000000000
        + 0b00000000000000
        + 0b00000000000000 // JMP
        + 0b00000000000000 // JMP
        + 0b00000000000000
        + 0b00000000000000
        + 0b00000000000000 // BEQ
        + 0b00000000000000 // BEQ
        + 0b00000000000000 // BNE
        + 0b00000000000000 // BNE
        + 0b00000000000000 // LDR
        + 0b00000000000000 // LDR
        + 0b00000100000001 // ADD
        + 0b00000100000001 // ADD
        + 0b00000100000101 // SUB
        + 0b00000100000101 // SUB
        + 0b00000000000000
        + 0b00000000000000
        + 0b00000000000000
        + 0b00000000000000
        + 0b00000111001101 // CMPEQ
        + 0b00000111001101 // CMPEQ
        + 0b00000111010101 // CMPLT
        + 0b00000111010101 // CMPLT
        + 0b00000111011101 // CMPLE
        + 0b00000111011101 // CMPLE
        + 0b00000000000000
        + 0b00000000000000
        + 0b00000101100001 // AND
        + 0b00000101100001 // AND
        + 0b00000101111001 // OR
        + 0b00000101111001 // OR
        + 0b00000111011001 // XOR
        + 0b00000111011001 // XOR
        + 0b00000000000000
        + 0b00000000000000
        + 0b00000110000001 // SHL
        + 0b00000110000001 // SHL
        + 0b00000110000101 // SHR
        + 0b00000110000101 // SHR
        + 0b00000110001101 // SRA
        + 0b00000110001101 // SRA
        + 0b00000000000000
        + 0b00000000000000
        + 0b00010100000001
        + 0b00010100000001
        + 0b00010100000101
        + 0b00010100000101
        + 0b00000000000000
        + 0b00000000000000
        + 0b00000000000000
        + 0b00000000000000
        + 0b00010111001101 // CMPEQC
        + 0b00010111001101 // CMPEQC
        + 0b00010111010101 // CMPLTC
        + 0b00010111010101 // CMPLTC
        + 0b00010111011101 // CMPLEC
        + 0b00010111011101 // CMPLEC
        + 0b00000000000000
        + 0b00000000000000
        + 0b00010101100001 // ANDC
        + 0b00010101100001 // ANDC
        + 0b00010101111001 // ORC
        + 0b00010101111001 // ORC
        + 0b00010111011001 // XORC
        + 0b00010111011001 // XORC
        + 0b00000000000000
        + 0b00000000000000
        + 0b00010110000001 // SHLC
        + 0b00010110000001 // SHLC
        + 0b00010110000101 // SHRC
        + 0b00010110000101 // SHRC
        + 0b00010110001101 // SRAC
        + 0b00010110001101 // SRAC
    + )

.ends

.subckt 

* Wop OPCODE[5:0] nrz(0, 5, 100ns, 0ns, 0.1ns, 0.1ns) 0
* Wz z nrz(0, 5, 100ns, 0ns, 0.1ns, 0.1ns) 0
* Xcu_test OPCODE[5:0] z a[1:0] b c d[1:0] e[5:0] f g controlunit

* .tran 100ns
* .plot a[1:0]
* .plot d[1:0]
* .plot e[5:0]
* .plot g

* Counter
* Ws reset nrz(0, 5, 15ns, 0ns, 0.1ns, 0.1ns) 1 0
* Xreset reset#32 sum[31:0] 0#32 muxOut[31:0] mux2
* Xregisters muxOut[31:0] clk2#32 b[31:0] dreg