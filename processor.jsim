.include "ALU.jsim"

.subckt controlunit OPCODE[5:0] Z PCSEL[1:0] RA2SEL BSEL WDSEL[1:0] ALUFN[5:0] Wr WERF 

Xconn_1 OPCODE[5:0] OPCODEZ[6:1] knex
.connect OPCODEZ0 Z

* Control Unit
Xmem
+ vdd 0 0 OPCODEZ[6:0] PCSEL[1:0] RA2SEL BSEL WDSEL[1:0] ALUFN[5:0] Wr WERF 
+ $memory width=14 nlocations=128
+ contents=(
    + 0b00000000000000
    + 0b00000000000000
    + 0b00000000000000
    + 0b00000000000000
    + 0b00000000000000
    + 0b00000000000000
    + 0b00000000000000
    + 0b00000000000000
    + 0b00000000000000
    + 0b00000000000000
    + 0b00000000000000
    + 0b00000000000000
    + 0b00000000000000
    + 0b00000000000000
    + 0b00000000000000
    + 0b00000000000000
    + 0b00000000000000
    + 0b00000000000000
    + 0b00000000000000
    + 0b00000000000000
    + 0b00000000000000
    + 0b00000000000000
    + 0b00000000000000
    + 0b00000000000000
    + 0b00000000000000
    + 0b00000000000000
    + 0b00000000000000
    + 0b00000000000000
    + 0b00000000000000
    + 0b00000000000000
    + 0b00000000000000
    + 0b00000000000000
    + 0b00000000000000
    + 0b00000000000000
    + 0b00000000000000
    + 0b00000000000000
    + 0b00000000000000
    + 0b00000000000000
    + 0b00000000000000
    + 0b00000000000000
    + 0b00000000000000
    + 0b00000000000000
    + 0b00000000000000
    + 0b00000000000000
    + 0b00000000000000
    + 0b00000000000000
    + 0b00000000000000
    + 0b00000000000000)
    * + 0b00001000000010 * LD
    * + 0b00001000000010 * LD
    * + 0b00000000000000 * ST
    * + 0b00000000000000 * ST
    * + 0b00000000000000
    * + 0b00000000000000
    * + 0b00000000000000 * JMP
    * + 0b00000000000000 * JMP
    * + 0b00000000000000
    * + 0b00000000000000
    * + 0b00000000000000 * BEQ
    * + 0b00000000000000 * BEQ
    * + 0b00000000000000 * BNE
    * + 0b00000000000000 * BNE
    * + 0b00000000000000 * LDR
    * + 0b00000000000000 * LDR
    * + 0b00000000000000 * ADD
    * + 0b00000000000000 * ADD
    * + 0b00000000000000 * SUB
    * + 0b00000000000000 * SUB
    * + 0b00000000000000 * MUL
    * + 0b00000000000000 * MUL
    * + 0b00000000000000 * DIV
    * + 0b00000000000000 * DIV
    * + 0b00000000000000 * CMPEQ
    * + 0b00000000000000 * CMPEQ
    * + 0b00000000000000 * CMPLT
    * + 0b00000000000000 * CMPLT
    * + 0b00000000000000 * CMPLE
    * + 0b00000000000000 * CMPLE
    * + 0b00000000000000
    * + 0b00000000000000
    * + 0b00000000000000 * AND
    * + 0b00000000000000 * AND
    * + 0b00000000000000 * OR
    * + 0b00000000000000 * OR
    * + 0b00000000000000 * XOR
    * + 0b00000000000000 * XOR
    * + 0b00000000000000
    * + 0b00000000000000
    * + 0b00000000000000 * SHL
    * + 0b00000000000000 * SHL
    * + 0b00000000000000 * SHR
    * + 0b00000000000000 * SHR
    * + 0b00000000000000 * SRA
    * + 0b00000000000000 * SRA
    * + 0b00000000000000
    * + 0b00000000000000
    * + 0b00000000000000 * ADDC
    * + 0b00000000000000 * ADDC
    * + 0b00000000000000 * SUBC
    * + 0b00000000000000 * SUBC
    * + 0b00000000000000 * MULC
    * + 0b00000000000000 * MULC
    * + 0b00000000000000 * DIVC
    * + 0b00000000000000 * DIVC
    * + 0b00000000000000 * CMPEQC
    * + 0b00000000000000 * CMPEQC
    * + 0b00000000000000 * CMPLTC
    * + 0b00000000000000 * CMPLTC
    * + 0b00000000000000 * CMPLEC
    * + 0b00000000000000 * CMPLEC
    * + 0b00000000000000
    * + 0b00000000000000
    * + 0b00000000000000 * ANDC
    * + 0b00000000000000 * ANDC
    * + 0b00000000000000 * ORC
    * + 0b00000000000000 * ORC
    * + 0b00000000000000 * XORC
    * + 0b00000000000000 * XORC
    * + 0b00000000000000
    * + 0b00000000000000
    * + 0b00000000000000 * SHLC
    * + 0b00000000000000 * SHLC
    * + 0b00000000000000 * SHRC
    * + 0b00000000000000 * SHRC
    * + 0b00000000000000 * SRAC
    * + 0b00000000000000) * SRAC
* + )

* Xconn_2 flags[7:2] ALUFN[5:0] knex
* Xconn_3 flags[9:8] WDSEL[1:0] knex
* Xconn_4 flags[13:12] PCSEL[1:0] knex
* .connect flags11 RA2SEL
* .connect flags10 BSEL
* .connect flags1 Wr
* .connect flags0 WERF

.ends

Wop OPCODE[5:0] nrz(0, 5, 100ns, 0ns, 0.1ns, 0.1ns) 0
Wz z nrz(0, 5, 100ns, 0ns, 0.1ns, 0.1ns) 0
Xcu_test OPCODE[5:0] z a[1:0] b c d[1:0] e[5:0] f g controlunit

.tran 100ns
.plot a[1:0]
.plot d[1:0]
.plot e[5:0]
.plot g

* Counter
* Ws reset nrz(0, 5, 15ns, 0ns, 0.1ns, 0.1ns) 1 0
* Xreset reset#32 sum[31:0] 0#32 muxOut[31:0] mux2
* Xregisters muxOut[31:0] clk2#32 b[31:0] dreg