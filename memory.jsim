.include "ALU.jsim"

.subckt controlunit OPCODE[5:0] Z PCSEL[1:0] RA2SEL BSEL WDSEL[1:0] ALUFN[5:0] Wr WERF 

    Xconn_1 OPCODE[5:0] OPCODEZ[6:1] knex
    .connect OPCODEZ0 Z

    * Control Unit
    Xmem
    + vdd 0 0 OPCODEZ[6:0] PCSEL[1:0] RA2SEL BSEL WDSEL[1:0] ALUFN[5:0] Wr WERF 
    + $memory width=14 nlocations=128
    + contents=(
        + 0b00000000000000
        + 0b00000000000000
        + 0b00000000000000
        + 0b00000000000000
        + 0b00000000000000
        + 0b00000000000000
        + 0b00000000000000
        + 0b00000000000000
        + 0b00000000000000
        + 0b00000000000000
        + 0b00000000000000
        + 0b00000000000000
        + 0b00000000000000
        + 0b00000000000000
        + 0b00000000000000
        + 0b00000000000000
        + 0b00000000000000
        + 0b00000000000000
        + 0b00000000000000
        + 0b00000000000000
        + 0b00000000000000
        + 0b00000000000000
        + 0b00000000000000
        + 0b00000000000000
        + 0b00000000000000
        + 0b00000000000000
        + 0b00000000000000
        + 0b00000000000000
        + 0b00000000000000
        + 0b00000000000000
        + 0b00000000000000
        + 0b00000000000000
        + 0b00000000000000
        + 0b00000000000000
        + 0b00000000000000
        + 0b00000000000000
        + 0b00000000000000
        + 0b00000000000000
        + 0b00000000000000
        + 0b00000000000000
        + 0b00000000000000
        + 0b00000000000000
        + 0b00000000000000
        + 0b00000000000000
        + 0b00000000000000
        + 0b00000000000000
        + 0b00000000000000
        + 0b00000000000000
        + 0b00011000000001 // LD
        + 0b00011000000001 // LD
        + 0b00110000000010 // ST
        + 0b00110000000010 // ST
        + 0b00000000000000
        + 0b00000000000000
        + 0b10000000000001 // JMP
        + 0b10000000000001 // JMP
        + 0b00000000000000
        + 0b00000000000000
        + 0b00000000000001 // BEQ
        + 0b01000000000001 // BEQ
        + 0b01000000000001 // BNE
        + 0b00000000000001 // BNE
        + 0b00000000000000
        + 0b00000000000000
        + 0b00000100000001 // ADD
        + 0b00000100000001 // ADD
        + 0b00000100000101 // SUB
        + 0b00000100000101 // SUB
        + 0b00000000000000
        + 0b00000000000000
        + 0b00000000000000
        + 0b00000000000000
        + 0b00000111001101 // CMPEQ
        + 0b00000111001101 // CMPEQ
        + 0b00000111010101 // CMPLT
        + 0b00000111010101 // CMPLT
        + 0b00000111011101 // CMPLE
        + 0b00000111011101 // CMPLE
        + 0b00000000000000
        + 0b00000000000000
        + 0b00000101100001 // AND
        + 0b00000101100001 // AND
        + 0b00000101111001 // OR
        + 0b00000101111001 // OR
        + 0b00000101011001 // XOR
        + 0b00000101011001 // XOR
        + 0b00000000000000
        + 0b00000000000000
        + 0b00000110000001 // SHL
        + 0b00000110000001 // SHL
        + 0b00000110000101 // SHR
        + 0b00000110000101 // SHR
        + 0b00000110001101 // SRA
        + 0b00000110001101 // SRA
        + 0b00000000000000
        + 0b00000000000000
        + 0b00010100000001 // ADDC
        + 0b00010100000001 // ADDC
        + 0b00010100000101 // SUBC
        + 0b00010100000101 // SUBC
        + 0b00000000000000
        + 0b00000000000000
        + 0b00000000000000
        + 0b00000000000000
        + 0b00010111001101 // CMPEQC
        + 0b00010111001101 // CMPEQC
        + 0b00010111010101 // CMPLTC
        + 0b00010111010101 // CMPLTC
        + 0b00010111011101 // CMPLEC
        + 0b00010111011101 // CMPLEC
        + 0b00000000000000
        + 0b00000000000000
        + 0b00010101100001 // ANDC
        + 0b00010101100001 // ANDC
        + 0b00010101111001 // ORC
        + 0b00010101111001 // ORC
        + 0b00010101011001 // XORC
        + 0b00010101011001 // XORC
        + 0b00000000000000
        + 0b00000000000000
        + 0b00010110000001 // SHLC
        + 0b00010110000001 // SHLC
        + 0b00010110000101 // SHRC
        + 0b00010110000101 // SHRC
        + 0b00010110001101 // SRAC
        + 0b00010110001101 // SRAC
        + 0b00000000000000
        + 0b00000000000000
    + )

.ends

.subckt datamemory clock A[9:0] WD[31:0] Wr RD[31:0] reset

    Xmux reset Wr 0 wres mux2

    Xmem
    + vdd 0 0 A[9:0] RD[31:0]
    + 0 clock wres A[9:0] WD[31:0]
    + $memory width=32 nlocations=1024
    + file="branchjmp.bin"
.ends

.subckt instructionmemory A[9:0] D[31:0]
    Xmem
    + vdd 0 0 A[9:0] D[31:0]
    + $memory width=32 nlocations=1024
    + file="branchjmp.bin"
.ends

.subckt registers clock WD[31:0] WE WA[4:0] RA1a[4:0] RA2a[4:0] RD1d[31:0] RD2d[31:0] reset

    Xmux reset WE 0 WEres mux2

    *Disable write if R31
    Xand_1 WA4 WA3 WA2 WA1 a and4
    Xnand_1 a WA0 b nand2
    Xand_2 b WEres wre and2

    Xmem
    + 0 clock wre WA[4:0] WD[31:0]
    + vdd 0 0 RA1a[4:0] RD1d[31:0]
    + vdd 0 0 RA2a[4:0] RD2d[31:0]
    + $memory width=32 nlocations=32
    + contents=(
        + 0 0 0 0 0 0 0 0
        + 0 0 0 0 0 0 0 0
        + 0 0 0 0 0 0 0 0
        + 0 0 0 0 0 0 0 0)

.ends